{"version":3,"file":"static/js/168.bcd97578.chunk.js","mappings":"sPACA,EAAuB,sB,kBC8CvB,EAzCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,WAAMC,GAAN,uFAEhBH,GAAa,GAFG,UAGOI,EAAAA,EAAAA,IAAWD,GAHlB,OAGVE,EAHU,OAIhBP,EAAWO,GAJK,gDAMhBC,QAAQC,IAAR,MANgB,yBAQhBP,GAAa,GARG,4EAAH,sDAWjBE,EAAYR,EACb,GAAE,CAACA,IAEJ,IAAMc,EAAqC,IAAnBX,EAAQY,SAAiBV,EAC3CW,EAAgBb,EAAQY,OAAS,IAAMV,EAE7C,OACE,gCACGA,IAAa,SAACY,EAAA,EAAD,IACbD,IACC,eAAIE,UAAWC,EAAf,SACGhB,EAAQiB,KAAI,gBAAGX,EAAH,EAAGA,GAAIY,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OACX,2BACE,qCAAaA,MACb,uBAAID,MAFGZ,EADE,MAQhBK,IAAmB,sEAGzB,C,sLCxCYS,E,OAAMC,EAAAA,OAAa,CAC9BC,QAJO,+BAKPC,OAAQ,CACNC,QALY,sCASVC,EAAuB,mCAEvBC,EACJ,4EAEWC,EAAc,mCAAG,oGACLP,EAAIQ,IAAJ,uBADK,cACtBC,EADsB,yBAErBA,EAASC,KAAKC,QAAQd,KAAI,gBAAGX,EAAH,EAAGA,GAAI0B,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,YAAxB,MAA2C,CAC1E5B,GAAAA,EACA0B,MAAAA,EACAC,SAAAA,EACAE,OAAQD,EAAcT,EAAuBS,EAAc,GAJ5B,KAFL,2CAAH,qDAUdE,EAAe,mCAAG,WAAMC,GAAN,uFACNjB,EAAIQ,IAAJ,8BAA+BS,IADzB,cACvBR,EADuB,yBAEtBA,EAASC,KAAKC,QAAQd,KAAI,gBAAGX,EAAH,EAAGA,GAAI0B,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,YAAxB,MAA2C,CAC1E5B,GAAAA,EACA0B,MAAAA,EACAC,SAAAA,EACAE,OAAQD,EAAcT,EAAuBS,EAAcR,EAJ5B,KAFJ,2CAAH,sDAUfY,EAAgB,mCAAG,WAAMzC,GAAN,2GACPuB,EAAIQ,IAAJ,iBAAkB/B,EAAlB,MADO,cACxBgC,EADwB,SAU1BA,EAASC,KAPXxB,EAH4B,EAG5BA,GACAiC,EAJ4B,EAI5BA,OACAP,EAL4B,EAK5BA,MACAQ,EAN4B,EAM5BA,aACAP,EAP4B,EAO5BA,SACAC,EAR4B,EAQ5BA,YACAO,EAT4B,EAS5BA,aAGIC,EAAc,IAAIC,KAAKH,GACvBI,EAAcC,MAAMH,GACtB,UACAA,EAAYI,cAfc,kBAiBvB,CACLxC,GAAAA,EACA0B,MAAAA,EACAY,YAAAA,EACAX,SAAAA,EACAE,OAAQD,EA9CiB,mCA8CoBA,EAAcR,EAC3Da,OAAQA,EAAOtB,KAAI,qBAAG8B,IAAH,IACnBC,OAAQP,IAxBoB,2CAAH,sDA4BhBQ,EAAO,mCAAG,WAAMC,GAAN,uFACE9B,EAAIQ,IAAJ,iBAAkBsB,EAAlB,cADF,cACfrB,EADe,yBAGdA,EAASC,KAAKqB,KAAKlC,KAAI,gBAAGX,EAAH,EAAGA,GAAIyC,EAAP,EAAOA,KAAMK,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,MAA4C,CACxE/C,GAAAA,EACA8C,UAAAA,EACAE,QAASD,EAAe5B,EAAuB4B,EAAe3B,EAC9DqB,KAAAA,EAJ4B,KAHT,2CAAH,sDAWPxC,EAAU,mCAAG,WAAM2C,GAAN,uFACD9B,EAAIQ,IAAJ,iBAAkBsB,EAAlB,cADC,cAClBrB,EADkB,yBAEjBA,EAASC,KAAKC,QAAQd,KAAI,kBAA8B,CAC7DX,GAD+B,EAAGA,GAElCY,QAF+B,EAAOA,QAGtCC,OAH+B,EAAgBA,OAAhB,KAFT,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","services/Api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__okdpy\"};","import { getReviews } from '../../services/Api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport css from './Reviews.module.css';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const loadReviews = async id => {\n      try {\n        setIsLoading(true);\n        const comments = await getReviews(id);\n        setReviews(comments);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadReviews(movieId);\n  }, [movieId]);\n\n  const isShowNoRecords = reviews.length === 0 && !isLoading;\n  const isShowReviews = reviews.length > 0 && !isLoading;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {isShowReviews && (\n        <ul className={css.list}>\n          {reviews.map(({ id, content, author }) => (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {isShowNoRecords && <p>We don't have any reviews for this movie</p>}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst URL = `https://api.themoviedb.org/3`;\nconst API_KEY = 'e0b2738922ecba49fdf80e5e8d9f9891';\n\nexport const api = axios.create({\n  baseURL: URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nconst POSTER_BASE_URL_W154 = 'https://image.tmdb.org/t/p/w154/';\nconst POSTER_BASE_URL_W300 = 'https://image.tmdb.org/t/p/w300/';\nconst NO_PHOTO =\n  'https://westsiderc.org/wp-content/uploads/2019/08/Image-Not-Available.png';\n\nexport const getTrendMovies = async () => {\n  const response = await api.get(`/trending/movie/day`);\n  return response.data.results.map(({ id, title, overview, poster_path }) => ({\n    id,\n    title,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W154 + poster_path : '',\n  }));\n};\n\nexport const getMoviesByName = async query => {\n  const response = await api.get(`/search/movie?query=${query}`);\n  return response.data.results.map(({ id, title, overview, poster_path }) => ({\n    id,\n    title,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W154 + poster_path : NO_PHOTO,\n  }));\n};\n\nexport const getMoviesDetails = async movieId => {\n  const response = await api.get(`/movie/${movieId}?`);\n  const {\n    id,\n    genres,\n    title,\n    release_date,\n    overview,\n    poster_path,\n    vote_average,\n  } = response.data;\n\n  const releaseDate = new Date(release_date);\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n\n  return {\n    id,\n    title,\n    releaseYear,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W300 + poster_path : NO_PHOTO,\n    genres: genres.map(({ name }) => name),\n    rating: vote_average,\n  };\n};\n\nexport const getCast = async movieid => {\n  const response = await api.get(`/movie/${movieid}/credits?`);\n\n  return response.data.cast.map(({ id, name, character, profile_path }) => ({\n    id,\n    character,\n    profile: profile_path ? POSTER_BASE_URL_W154 + profile_path : NO_PHOTO,\n    name,\n  }));\n};\n\nexport const getReviews = async movieid => {\n  const response = await api.get(`/movie/${movieid}/reviews?`);\n  return response.data.results.map(({ id, content, author }) => ({\n    id,\n    content,\n    author,\n  }));\n};\n"],"names":["movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","loadReviews","id","getReviews","comments","console","log","isShowNoRecords","length","isShowReviews","Loader","className","css","map","content","author","api","axios","baseURL","params","api_key","POSTER_BASE_URL_W154","NO_PHOTO","getTrendMovies","get","response","data","results","title","overview","poster_path","poster","getMoviesByName","query","getMoviesDetails","genres","release_date","vote_average","releaseDate","Date","releaseYear","isNaN","getFullYear","name","rating","getCast","movieid","cast","character","profile_path","profile"],"sourceRoot":""}