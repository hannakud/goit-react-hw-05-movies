{"version":3,"file":"static/js/76.ff7b5a5b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/Api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../services/Api';\nimport { toast } from 'react-toastify';\nimport css from './Cast.module.css';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const loadCast = async id => {\n      try {\n        setIsLoading(true);\n        const castList = await getCast(id);\n        setCast(castList);\n      } catch (error) {\n        toast.error(' Sorry, there is no cast');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadCast(movieId);\n  }, [movieId]);\n\n  const isShowCast = cast.length > 0 && !isLoading;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {isShowCast && (\n        <ul className={css.list}>\n          {cast &&\n            cast.map(({ id, character, profile, name }) => (\n              <li key={id} className={css.item}>\n                <img src={profile} alt={name} width=\"140\" height=\"175\" />\n                <div className={css.description}>\n                  <h3>{name}</h3>\n                  <p>Character: {character}</p>\n                </div>\n              </li>\n            ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst URL = `https://api.themoviedb.org/3`;\nconst API_KEY = 'e0b2738922ecba49fdf80e5e8d9f9891';\n\nexport const api = axios.create({\n  baseURL: URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nconst POSTER_BASE_URL_W154 = 'https://image.tmdb.org/t/p/w154/';\nconst POSTER_BASE_URL_W300 = 'https://image.tmdb.org/t/p/w300/';\nconst NO_PHOTO =\n  'https://westsiderc.org/wp-content/uploads/2019/08/Image-Not-Available.png';\n\nexport const getTrendMovies = async () => {\n  const response = await api.get(`/trending/movie/day`);\n  return response.data.results.map(({ id, title, overview, poster_path }) => ({\n    id,\n    title,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W154 + poster_path : '',\n  }));\n};\n\nexport const getMoviesByName = async query => {\n  const response = await api.get(`/search/movie?query=${query}`);\n  return response.data.results.map(({ id, title, overview, poster_path }) => ({\n    id,\n    title,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W154 + poster_path : NO_PHOTO,\n  }));\n};\n\nexport const getMoviesDetails = async movieId => {\n  const response = await api.get(`/movie/${movieId}?`);\n  const {\n    id,\n    genres,\n    title,\n    release_date,\n    overview,\n    poster_path,\n    vote_average,\n  } = response.data;\n\n  const releaseDate = new Date(release_date);\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n\n  return {\n    id,\n    title,\n    releaseYear,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W300 + poster_path : NO_PHOTO,\n    genres: genres.map(({ name }) => name),\n    rating: vote_average,\n  };\n};\n\nexport const getCast = async movieid => {\n  const response = await api.get(`/movie/${movieid}/credits?`);\n\n  return response.data.cast.map(({ id, name, character, profile_path }) => ({\n    id,\n    character,\n    profile: profile_path ? POSTER_BASE_URL_W154 + profile_path : NO_PHOTO,\n    name,\n  }));\n};\n\nexport const getReviews = async movieid => {\n  const response = await api.get(`/movie/${movieid}/reviews?`);\n  return response.data.results.map(({ id, content, author }) => ({\n    id,\n    content,\n    author,\n  }));\n};\n"],"names":["movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","loadCast","id","getCast","castList","toast","isShowCast","length","Loader","className","css","map","character","profile","name","src","alt","width","height","api","axios","baseURL","params","api_key","POSTER_BASE_URL_W154","NO_PHOTO","getTrendMovies","get","response","data","results","title","overview","poster_path","poster","getMoviesByName","query","getMoviesDetails","genres","release_date","vote_average","releaseDate","Date","releaseYear","isNaN","getFullYear","rating","movieid","profile_path","getReviews","content","author"],"sourceRoot":""}