{"version":3,"file":"static/js/899.04b58065.chunk.js","mappings":"kLACA,EAAiC,uCAAjC,EAAiF,+BAAjF,EAAuH,6BAAvH,EAAkK,oC,SCuBlK,EApBuB,SAAC,GAAqC,IAAnCA,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC7C,OACE,gBAAIC,UAAWC,EAAf,WACE,gBAAKD,UAAWC,EAAYC,IAAKH,EAAQI,IAAKN,KAC9C,wBAAKA,KACL,cAAGG,UAAWC,EAAd,SAAyBH,KACzB,gBAAKE,UAAWC,EAAhB,UACE,SAAC,EAAAG,KAAD,CAAMC,GAAE,kBAAaT,GAArB,8BAIP,ECdD,EAA6B,+BC8B7B,EA3BmB,SAAC,GAAgB,IAAdU,EAAa,EAAbA,OACpB,OACE,eAAIN,UAAWC,EAAf,SACGK,EAAOC,KAAI,gBAAGX,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,OAAxB,OACV,SAAC,EAAD,CAEEH,GAAIA,EACJC,MAAOA,EACPC,SAAUA,EACVC,OAAQA,GAJHH,EAFG,KAWjB,C,8ICjBD,EAA0B,6BAA1B,EAAoE,gCAApE,EAAkH,iCAAlH,EAA4J,4B,SCwC5J,EApCqB,WACnB,OAAwCY,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,WAAa,GAC5C,GAA4BC,EAAAA,EAAAA,WAAS,kBAAMF,CAAN,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAcA,OACE,gBAAKf,UAAWC,EAAhB,UACE,kBAAMD,UAAWC,EAAgBe,SAdhB,SAAAC,GACnBA,EAAEC,iBAEF,IAAMP,EAAQM,EAAEE,OAAOC,SAAST,MAAMU,MACjCV,EAKLD,EAAgB,CAAEI,OAAQH,IAJxBW,EAAAA,GAAAA,MAAY,yBAKf,EAIG,WACE,kBACEtB,UAAWC,EACXsB,KAAK,QACLC,KAAK,OACLC,YAAY,gBACZJ,MAAOP,EACPY,SAAU,SAAAC,GAAK,OAAIZ,EAAUY,EAAMR,OAAOE,MAA3B,KAEjB,mBAAQrB,UAAWC,EAAYuB,KAAK,SAApC,wBAMP,E,kBCID,EAnCe,WACb,OAA4BX,EAAAA,EAAAA,UAAS,IAArC,eAAOP,EAAP,KAAesB,EAAf,KACA,GAAuBpB,EAAAA,EAAAA,mBAAhBC,GAAP,eAEA,GAAkCI,EAAAA,EAAAA,WAAS,GAA3C,eAAOgB,EAAP,KAAkBC,EAAlB,KACMnB,EAAQF,EAAaG,IAAI,WAAa,GAsB5C,OApBAmB,EAAAA,EAAAA,YAAU,WACR,GAAIpB,EAAO,CACT,IAAMqB,EAAY,mCAAG,WAAMlB,GAAN,uFAEjBgB,GAAa,GAFI,UAGQG,EAAAA,EAAAA,IAAgBnB,GAHxB,OAGXoB,EAHW,OAIjBN,EAAUM,GACLA,EAAWC,QACdb,EAAAA,GAAAA,MAAA,uCAA4CX,EAA5C,MANe,gDASjBW,EAAAA,GAAAA,MAAY,kCATK,yBAWjBQ,GAAa,GAXI,4EAAH,sDAclBE,EAAarB,EACd,CACF,GAAE,CAACA,KAGF,4BACE,SAAC,EAAD,KACA,8BAAGkB,GAAY,SAACO,EAAA,EAAD,KAAa,SAACC,EAAA,EAAD,CAAY/B,OAAQA,QAGrD,C,sLCpCYgC,E,OAAMC,EAAAA,OAAa,CAC9BC,QAJO,+BAKPC,OAAQ,CACNC,QALY,sCASVC,EAAuB,mCAEvBC,EACJ,4EAEWC,EAAc,mCAAG,oGACLP,EAAI1B,IAAJ,uBADK,cACtBkC,EADsB,yBAErBA,EAASC,KAAKC,QAAQzC,KAAI,gBAAGX,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUmD,EAAxB,EAAwBA,YAAxB,MAA2C,CAC1ErD,GAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAC,OAAQkD,EAAcN,EAAuBM,EAAc,GAJ5B,KAFL,2CAAH,qDAUdhB,EAAe,mCAAG,WAAMtB,GAAN,uFACN2B,EAAI1B,IAAJ,8BAA+BD,IADzB,cACvBmC,EADuB,yBAEtBA,EAASC,KAAKC,QAAQzC,KAAI,gBAAGX,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SAAUmD,EAAxB,EAAwBA,YAAxB,MAA2C,CAC1ErD,GAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAC,OAAQkD,EAAcN,EAAuBM,EAAcL,EAJ5B,KAFJ,2CAAH,sDAUfM,EAAgB,mCAAG,WAAMC,GAAN,2GACPb,EAAI1B,IAAJ,iBAAkBuC,EAAlB,MADO,cACxBL,EADwB,SAU1BA,EAASC,KAPXnD,EAH4B,EAG5BA,GACAwD,EAJ4B,EAI5BA,OACAvD,EAL4B,EAK5BA,MACAwD,EAN4B,EAM5BA,aACAvD,EAP4B,EAO5BA,SACAmD,EAR4B,EAQ5BA,YACAK,EAT4B,EAS5BA,aAGIC,EAAc,IAAIC,KAAKH,GACvBI,EAAcC,MAAMH,GACtB,UACAA,EAAYI,cAfc,kBAiBvB,CACL/D,GAAAA,EACAC,MAAAA,EACA4D,YAAAA,EACA3D,SAAAA,EACAC,OAAQkD,EA9CiB,mCA8CoBA,EAAcL,EAC3DQ,OAAQA,EAAO7C,KAAI,qBAAGgB,IAAH,IACnBqC,OAAQN,IAxBoB,2CAAH,sDA4BhBO,EAAO,mCAAG,WAAMC,GAAN,uFACExB,EAAI1B,IAAJ,iBAAkBkD,EAAlB,cADF,cACfhB,EADe,yBAGdA,EAASC,KAAKgB,KAAKxD,KAAI,gBAAGX,EAAH,EAAGA,GAAI2B,EAAP,EAAOA,KAAMyC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,MAA4C,CACxErE,GAAAA,EACAoE,UAAAA,EACAE,QAASD,EAAetB,EAAuBsB,EAAerB,EAC9DrB,KAAAA,EAJ4B,KAHT,2CAAH,sDAWP4C,EAAU,mCAAG,WAAML,GAAN,uFACDxB,EAAI1B,IAAJ,iBAAkBkD,EAAlB,cADC,cAClBhB,EADkB,yBAEjBA,EAASC,KAAKC,QAAQzC,KAAI,kBAA8B,CAC7DX,GAD+B,EAAGA,GAElCwE,QAF+B,EAAOA,QAGtCC,OAH+B,EAAgBA,OAAhB,KAFT,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/MoviesListItem/MoviesListItem.module.css?7daa","components/MoviesListItem/MoviesListItem.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/SearchMovies/SearchMovie.module.css?a1c2","components/SearchMovies/SearchMovies.jsx","pages/Movies/Movies.jsx","services/Api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MoviesListItem\":\"MoviesListItem_MoviesListItem__vYwX6\",\"poster\":\"MoviesListItem_poster__DTRMw\",\"text\":\"MoviesListItem_text__0V9SN\",\"LinkWrapper\":\"MoviesListItem_LinkWrapper__j4pCn\"};","import { Link } from 'react-router-dom';\nimport css from './MoviesListItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst MoviesListItem = ({ id, title, overview, poster }) => {\n  return (\n    <li className={css.MoviesListItem}>\n      <img className={css.poster} src={poster} alt={title} />\n      <h4>{title}</h4>\n      <p className={css.text}>{overview}</p>\n      <div className={css.LinkWrapper}>\n        <Link to={`/movies/${id}`}>Show details</Link>\n      </div>\n    </li>\n  );\n};\n\nMoviesListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  overview: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n};\n\nexport default MoviesListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"MoviesList\":\"MoviesList_MoviesList__jqSLr\"};","import MoviesListItem from 'components/MoviesListItem/MoviesListItem';\nimport css from './MoviesList.module.css';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <ul className={css.MoviesList}>\n      {movies.map(({ id, title, overview, poster }) => (\n        <MoviesListItem\n          key={id}\n          id={id}\n          title={title}\n          overview={overview}\n          poster={poster}\n        />\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      poster: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SearchMovie_wrapper__fJJYe\",\"SearchForm\":\"SearchMovie_SearchForm__klgYd\",\"SearchInput\":\"SearchMovie_SearchInput__s9YN3\",\"button\":\"SearchMovie_button__3ZmJp\"};","import { toast } from 'react-toastify';\nimport css from './SearchMovie.module.css';\nimport { useSearchParams } from 'react-router-dom';\nimport { useState } from 'react';\n\nconst SearchMovies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('search') || '';\n  const [search, setSearch] = useState(() => query);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const query = e.target.elements.query.value;\n    if (!query) {\n      toast.error('Please enter something');\n      return;\n    }\n\n    setSearchParams({ search: query });\n  };\n\n  return (\n    <div className={css.wrapper}>\n      <form className={css.SearchForm} onSubmit={handleSubmit}>\n        <input\n          className={css.SearchInput}\n          name=\"query\"\n          type=\"text\"\n          placeholder=\"Search movies\"\n          value={search}\n          onChange={event => setSearch(event.target.value)}\n        />\n        <button className={css.button} type=\"submit\">\n          Search\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchMovies;\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMoviesByName } from '../../services/Api';\nimport SearchMovies from 'components/SearchMovies/SearchMovies';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams] = useSearchParams();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const query = searchParams.get('search') || '';\n\n  useEffect(() => {\n    if (query) {\n      const searchMovies = async search => {\n        try {\n          setIsLoading(true);\n          const moviesList = await getMoviesByName(search);\n          setMovies(moviesList);\n          if (!moviesList.length) {\n            toast.error(`No moviews found by search: \"${query}\"`);\n          }\n        } catch (error) {\n          toast.error('Ooops, something went wrong :(');\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      searchMovies(query);\n    }\n  }, [query]);\n\n  return (\n    <div>\n      <SearchMovies />\n      <>{isLoading ? <Loader /> : <MoviesList movies={movies} />}</>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst URL = `https://api.themoviedb.org/3`;\nconst API_KEY = 'e0b2738922ecba49fdf80e5e8d9f9891';\n\nexport const api = axios.create({\n  baseURL: URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nconst POSTER_BASE_URL_W154 = 'https://image.tmdb.org/t/p/w154/';\nconst POSTER_BASE_URL_W300 = 'https://image.tmdb.org/t/p/w300/';\nconst NO_PHOTO =\n  'https://westsiderc.org/wp-content/uploads/2019/08/Image-Not-Available.png';\n\nexport const getTrendMovies = async () => {\n  const response = await api.get(`/trending/movie/day`);\n  return response.data.results.map(({ id, title, overview, poster_path }) => ({\n    id,\n    title,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W154 + poster_path : '',\n  }));\n};\n\nexport const getMoviesByName = async query => {\n  const response = await api.get(`/search/movie?query=${query}`);\n  return response.data.results.map(({ id, title, overview, poster_path }) => ({\n    id,\n    title,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W154 + poster_path : NO_PHOTO,\n  }));\n};\n\nexport const getMoviesDetails = async movieId => {\n  const response = await api.get(`/movie/${movieId}?`);\n  const {\n    id,\n    genres,\n    title,\n    release_date,\n    overview,\n    poster_path,\n    vote_average,\n  } = response.data;\n\n  const releaseDate = new Date(release_date);\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n\n  return {\n    id,\n    title,\n    releaseYear,\n    overview,\n    poster: poster_path ? POSTER_BASE_URL_W300 + poster_path : NO_PHOTO,\n    genres: genres.map(({ name }) => name),\n    rating: vote_average,\n  };\n};\n\nexport const getCast = async movieid => {\n  const response = await api.get(`/movie/${movieid}/credits?`);\n\n  return response.data.cast.map(({ id, name, character, profile_path }) => ({\n    id,\n    character,\n    profile: profile_path ? POSTER_BASE_URL_W154 + profile_path : NO_PHOTO,\n    name,\n  }));\n};\n\nexport const getReviews = async movieid => {\n  const response = await api.get(`/movie/${movieid}/reviews?`);\n  return response.data.results.map(({ id, content, author }) => ({\n    id,\n    content,\n    author,\n  }));\n};\n"],"names":["id","title","overview","poster","className","css","src","alt","Link","to","movies","map","useSearchParams","searchParams","setSearchParams","query","get","useState","search","setSearch","onSubmit","e","preventDefault","target","elements","value","toast","name","type","placeholder","onChange","event","setMovies","isLoading","setIsLoading","useEffect","searchMovies","getMoviesByName","moviesList","length","Loader","MoviesList","api","axios","baseURL","params","api_key","POSTER_BASE_URL_W154","NO_PHOTO","getTrendMovies","response","data","results","poster_path","getMoviesDetails","movieId","genres","release_date","vote_average","releaseDate","Date","releaseYear","isNaN","getFullYear","rating","getCast","movieid","cast","character","profile_path","profile","getReviews","content","author"],"sourceRoot":""}